----------------------------------
Install gperftools for its libraries and header files

% brew install gperftools
----------------------------------
For Apple M1, Sequoia 15.1.1, there is an issue with default 'pprof' comes with gperftools, as discussed in https://github.com/gperftools/gperftools/issues/1292
The workaround for now is to install a different version of 'pprof'
% go install github.com/google/pprof@latest

Make sure to add ~/go/bin/ at beginning of $PATH so the default one will not be used.
----------------------------------
if run bitcoind as daemon, the .prof is created immediately when bitcoind starts, and will not catch the major activities.  If run as "daemon=0", then profile works correctly.  An explanation from chatgpt is:
It forks and detaches from the shell â€” the profiler (gperftools) often loses track of the correct process unless profiling is properly re-initialized after fork.
----------------------------------
the .prof is defined by env var: CPUPROFILE
CPUPROFILE=/tmp/bitcoind.prof

then call:
% pprof -callgrind bitcoind.prof # this one generates profile001.callgraph.out
% qcachegrind profile001.callgraph.out

# to remotely call RPC to stop bitcoind, instead of bitcoin-cli stop
curl --user user_name:password --data-binary '{"jsonrpc":"1.0","id":"curltest","method":"stop","params":[]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/
----------------------------------
To do it for cmake:
in CMakeLists.txt, comment out try_append_linker_flag("-Wl,-dead_strip_dylibs" TARGET core_interface)

in src/CmakeLists.txt:
  find_library(PROFILER_LIB profiler REQUIRED)
  target_link_libraries(bitcoind
    core_interface
    bitcoin_node
    $<TARGET_NAME_IF_EXISTS:bitcoin_wallet>
    ${PROFILER_LIB}
  )

After build:
% otool -L build/bin/bitcoind  
build/bin/bitcoind:
	/opt/homebrew/opt/gperftools/lib/libprofiler.0.dylib (compatibility version 6.0.0, current version 6.13.0)
	...
	...
	...
----------------------------------
Link -lprofiler to bitcoind executable
In bitcoin/src/Makefile, add -lprofiler for bitcoind_LINK:

bitcoind_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
        $(LIBTOOLFLAGS) --mode=link $(CXXLD) $(bitcoind_CXXFLAGS) \
        $(CXXFLAGS) $(bitcoind_LDFLAGS) $(LDFLAGS) -lprofiler -o $@

However, if you run:
otool -L src/bitcoind, it still doesn't show it's linking with /opt/homebrew/opt/gperftools/lib/libprofiler.0.dylib.  The root cause is that we have used tag -dead_strip_dylibs which will strip it off.  So, hack bitcoin/src/Makefile again and remove -Wl,-dead_strip_dylibs from CORE_LDFLAGS so that it will link with profiler
CORE_LDFLAGS =  -Wl,-headerpad_max_install_names -Wl,-dead_strip -Wl,-dead_strip_dylibs
becomes:
CORE_LDFLAGS =  -Wl,-headerpad_max_install_names -Wl,-dead_strip

use V=1 to see the detailed linking flags
% make V=1
% otool -L src/bitcoind
src/bitcoind:
	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1351.0.0)
	/opt/homebrew/opt/gperftools/lib/libprofiler.0.dylib (compatibility version 6.0.0, current version 6.13.0)
	/opt/homebrew/opt/berkeley-db@4/lib/libdb_cxx-4.8.dylib (compatibility version 0.0.0, current version 0.0.0)
	/opt/homebrew/opt/libevent/lib/libevent_pthreads-2.1.7.dylib (compatibility version 8.0.0, current version 8.1.0)
	/opt/homebrew/opt/libevent/lib/libevent-2.1.7.dylib (compatibility version 8.0.0, current version 8.1.0)
	/usr/lib/libsqlite3.dylib (compatibility version 9.0.0, current version 357.0.0)
	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 1800.101.0)
	/opt/homebrew/opt/llvm@16/lib/libunwind.1.dylib (compatibility version 1.0.0, current version 1.0.0)

----------------------------------
If running function test, because profiler will spit out some messages, so needs to comment an assertion in
test/functional/test_framework/test_node.py
+        # if stderr != expected_stderr:
+        #    raise AssertionError("Unexpected stderr {} != {}".format(stderr, expected_stderr))
