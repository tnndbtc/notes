----------------------------------
https://github.com/bitcoin/bitcoin/pull/31719

More notes on how to build/profile/run ci on Apple M1 chipset can be found at: 
https://github.com/tnndbtc/notes/tree/main/bitcoin

This one also shares the same fix for: https://github.com/bitcoin/bitcoin/issues/29098
----------------------------------
2025-03-07
[11:20:54 AM] <sipa> tnndbtc: i'm here
[11:21:19 AM] <tnndbtc> Great, let me post my draft here:
[11:21:19 AM] <tnndbtc> Let me see if I understand your proposal correctly:
[11:21:19 AM] <tnndbtc> Originally, the performance degradation comes from:
[11:21:19 AM] <tnndbtc> / fi
[11:21:19 AM] <tnndbtc> ```
[11:21:19 AM] <tnndbtc> for (size_t i = 0; i < node.keys.size(); ++i) {
[11:21:19 AM] <tnndbtc>     ...
[11:21:19 AM] <tnndbtc>     ...
[11:21:19 AM] <tnndbtc>     for (size_t j = 1; j < sats.size(); ++j) next_sats.push_back((sats[j] + ZERO) | (std::move(sats[j - 1]) + sat));
[11:21:19 AM] <tnndbtc> ```
[11:21:19 AM] <tnndbtc> }
[11:21:19 AM] <tnndbtc>     ...
[11:22:04 AM] <sipa> tnndbtc: on IRC it's generally considered impolite to copy-paste text
[11:22:37 AM] <sipa> but ok!
[11:22:56 AM] <sipa> is it just due to the operator+ and operator| ?
[11:24:12 AM] <tnndbtc> sipa I see.  Sorry.  Is there another way so we can ...
[11:24:12 AM] <tnndbtc> Okay, the outer for loop is to go through available keys.  The problem is the inner for loop, which is to compare/sort out the optimal keys by operator |
[11:24:59 AM] <tnndbtc> My understanding of your proposal is that to break out when we get k available keys, is my understanding right?
[11:25:13 AM] <sipa> yes, it won't help for the 999-of-999 case
[11:25:27 AM] <sipa> but there are other options
[11:27:18 AM] <sipa> for example if k=n, there is no need to run this inner loop for anything other than j == sats.size() - 1
[11:27:39 AM] <sipa> i think
[11:29:55 AM] <sipa> the code currently builds an optimal witness for _every_ t-of-n, for all values of t, and then picks t=0 for dissatisfaction and t=k for satisfaction
[11:30:06 AM] <sipa> all other t values go unused
[11:30:48 AM] <sipa> based on the values of k and n, i think not all t values are always needed
[11:31:01 AM] <tnndbtc> Then the challenge is to have a general implementation on this logic: we still want the inner loop to do compare/sort to achieve the optimization.  Then there are cases it will take long time, example, 998 out of 999.
[11:31:01 AM] <tnndbtc> I see your point on other t values go unused.  Let me think...
[11:32:28 AM] <sipa> though, i think the real slowdown is the fact that this is quadratically much work
[11:32:57 AM] <sipa> oh, it may be cubic, and we can reduce it to quadratic for n-of-n
[11:33:33 AM] <sipa> your approach is linear, but maybe quadratic suffices
[11:36:09 AM] <tnndbtc> Yes, the real slowdown indeed is the quadratically much of work, when doing an additional sorting to get optimal size.
[11:37:47 AM] <tnndbtc> for quadratic suffice on the linear approach, do you mean the size increases quadratically?
[11:39:21 AM] <sipa> the amount of data produced is quadratic in size: for every t from 0 through n, a witness is produced that contains n elements
[11:39:52 AM] <sipa> but i think the operator+ itself does linear work on itself, so the total amount of work is cubic
[11:41:20 AM] <sipa> (lunch time, will be back after)
[11:42:20 AM] <tnndbtc> Sure, last message just in case you are still here: in future, would we have keys much bigger than 999?  If so, quadratic approach would be a potential problem.
----------------------------------
Instruction on how to build on Mac Apple M1 chipset on Sequoia 15.1.1
https://github.com/tnndbtc/notes/blob/main/bitcoin/build.txt
Instruction on how to profile on Mac Apple M1 chipset on Sequoia 15.1.1
https://github.com/tnndbtc/notes/blob/main/bitcoin/profile.txt
----------------------------------
build/src/test/test_bitcoin --run_test=descriptor_tests
build/src/test/test_bitcoin --run_test=miniscript_tests
----------------------------------
to test:
% git remote add eriknylund https://github.com/eriknylund/bitcoin.git
% git fetch eriknylund
% git cherry-pick 387c12e0813a863bc9728777719acbafe7b12a34

#before fix: timed out

# after fix: 36 seconds

% build/test/functional/test_runner.py test/functional/wallet_taproot.py --tmpdir /tmp
Temporary test directory at /tmp/test_runner_₿_🏃_20250122_183137
Remaining jobs: [wallet_taproot.py --descriptors]
1/1 - wallet_taproot.py --descriptors passed, Duration: 36 s            

TEST                            | STATUS    | DURATION

wallet_taproot.py --descriptors | ✓ Passed  | 36 s

ALL                             | ✓ Passed  | 36 s (accumulated) 
Runtime: 36 s
----------------------------------
before fix
% build/test/functional/test_runner.py test/functional/wallet_taproot.py --tmpdir /tmp
Temporary test directory at /tmp/test_runner_₿_🏃_20250121_143627
Remaining jobs: [wallet_taproot.py --descriptors]
1/1 - wallet_taproot.py --descriptors passed, Duration: 10 s

TEST                            | STATUS    | DURATION

wallet_taproot.py --descriptors | ✓ Passed  | 10 s

ALL                             | ✓ Passed  | 10 s (accumulated)
Runtime: 10 s
-------------------------------
after fix:
% build/test/functional/test_runner.py test/functional/wallet_taproot.py --tmpdir /tmp
Temporary test directory at /tmp/test_runner_₿_🏃_20250121_144816
Remaining jobs: [wallet_taproot.py --descriptors]
1/1 - wallet_taproot.py --descriptors passed, Duration: 7 s

TEST                            | STATUS    | DURATION

wallet_taproot.py --descriptors | ✓ Passed  | 7 s

ALL                             | ✓ Passed  | 7 s (accumulated)
Runtime: 7 s
----------------------------------
(lldb) b src/script/miniscript.h:1193
after breakpoint is hit
(lldb) breakpoint modify --condition "sat.size > 0"
----------------------------------
callstack:
src/script/sign.cpp: SignTaprootScript
src/script/sign.cpp: SignTap
src/script/sign.cpp: ProduceSignature
----------------------------------
For comment: The new algorithm uses the best (smallest) set of k signatures.
The implementation is here:
src/script/miniscript.cpp
InputStack operator|(InputStack a, InputStack b) {
...
...
...
    // YESes, and the bigger ones between MAYBEs. Prefer YES over MAYBE.
    if (a.available == Availability::YES && b.available == Availability::YES) {
        return std::move(a.size <= b.size ? a : b);
...
...
...
----------------------------------
https://github.com/bitcoin/bitcoin/issues/28179
----------------------------------
To show correct call stack without inline opitmization for static functions, change -O2 to -O0 (CXXFLAGS, OBJCXXFLAGS, CFLAGS), and add -g 
----------------------------------
https://github.com/bitcoin/bitcoin/pull/28212
commit 387c12e0813a863bc9728777719acbafe7b12a34 has the test changes in PR: 28212.  The performance degradation starts in commit 4f473ea515bc77b9138323dab8a741c063d32e8f (or PR: https://github.com/bitcoin/bitcoin/pull/27255)
src/script/sign.cpp
src/script/miniscript.h

git checkout 4f473ea515bc77b9138323dab8a741c063d32e8f
git checkout HEAD~1
or
git checkout febe2abc0e
git cherry-pick 387c12e0813a863bc9728777719acbafe7b12a34

# to undo the cherry-pick
git reset HEAD~1
git checkout -- test/functional/wallet_taproot.py

to test:
test/functional/test_runner.py test/functional/wallet_taproot.py --tmpdir /tmp/ --nocleanup
----------------------------------
Laptop:
Chip: Apple M1
OS: Sequoia 15.1.1
CPUs: 8 cores
RAM: 16 GB
----------------------------------
pprof -text name.prof
pprof -web name.prof
pprof -kcachegrind name.prof
pprof -callgrind name.prof

qcachegrind name.out
----------------------------------
prof file results notes:
old_febe2abc0e.prof: profile result from commit febe2abc0e, before performance degradation.  This runs 7 seconds

4f473ea515_no_387c12e081.prof: profile result from commit 4f473ea515bc77b9138323dab8a741c063d32e8f without 387c12e081, or PR: https://github.com/bitcoin/bitcoin/pull/27255.  This runs 11 seconds, already a performance degradation

4f473ea515_387c12e081_1_100.prof: profile result from commit 4f473ea515bc77b9138323dab8a741c063d32e8f + cherry pick 387c12e0813a863bc9728777719acbafe7b12a34, self.do_test_k_of_n(1, 100)

4f473ea515_387c12e081_1_500.prof: profile result from commit 4f473ea515bc77b9138323dab8a741c063d32e8f + cherry pick 387c12e0813a863bc9728777719acbafe7b12a34, self.do_test_k_of_n(1, 500)

4f473ea515_387c12e081_1_700.prof: profile result from commit 4f473ea515bc77b9138323dab8a741c063d32e8f + cherry pick 387c12e0813a863bc9728777719acbafe7b12a34, self.do_test_k_of_n(1, 700)

old_febe2abc0e_387c12e081_1_100.prof: profile result from commit febe2abc0e + cherry pick 387c12e0813a863bc9728777719acbafe7b12a34, self.do_test_k_of_n(1, 100)

old_febe2abc0e_387c12e081_1_700.prof: profile result from commit febe2abc0e + cherry pick 387c12e0813a863bc9728777719acbafe7b12a34, self.do_test_k_of_n(1, 700)

----------------------------------
Profiling results:
modify test/functional/wallet_taproot.py
        # Test 999-of-999
        # self.do_test_k_of_n(999, 999)
        # 1,100 to 1,300 -> major increase is miniscript::Node::ProduceInput() const::{lambda(miniscript::Node const&, Span)#2}::operator()
        # self.do_test_k_of_n(1, 100) # total run: 15s operator(): 1.74s
            # self.do_test_k_of_n(1, 100) # base: febe2abc0e total run: 12s
        # self.do_test_k_of_n(1, 200) # total run: 19s operator(): 2.24s
        # self.do_test_k_of_n(1, 300) # total run: 26s operator(): 4.33s
        # self.do_test_k_of_n(1, 400) # total run: 38s operator(): 8.97s
        # self.do_test_k_of_n(1, 500) # total run: 60s operator(): 19.42s
        # self.do_test_k_of_n(1, 600) # total run: 90s operator(): 34.70s
        # self.do_test_k_of_n(1, 700) # total run: 130s operator(): 49.92s
            # self.do_test_k_of_n(1, 700) # base: febe2abc0e total run: 29s
        # self.do_test_k_of_n(1, 800) # total run: 187s operator(): 77.68s
        # self.do_test_k_of_n(1, 900) # total run: 274s operator(): 123.31s
        # self.do_test_k_of_n(1, 999) # total run: 348s operator(): 156.10s
        # self.do_test_k_of_n(999, 999) # total run: timeout
            # self.do_test_k_of_n(999, 999) # base: febe2abc0e total run: 40s
    
        # (1,100) to (50,100) no change
        # self.do_test_k_of_n(10, 100) # 14s
        # self.do_test_k_of_n(50, 100) # 14s
        # self.do_test_k_of_n(1, 300) # 26s operator(): 4.33s
        # self.do_test_k_of_n(300, 300) # 28s operator():
----------------------------------
Redirect stdout to a file (>out), and then redirect stderr to stdout (2>&1):
command >out 2>&1
----------------------------------
# ./test_runner.py -j8 -l DEBUG /ci_container_base/ci/scratch/qa-assets/fuzz_corpora/ miniscript_smart --empty_min_time=60
...
...
Run miniscript_smart with args ['/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz', '-runs=1', PosixPath('/ci_container_base/ci/scratch/qa-assets/fuzz_corpora/miniscript_smart')]INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3106261954
INFO: Loaded 1 modules   (627269 inline 8-bit counters): 627269 [0xaaaae915eb88, 0xaaaae91f7dcd), 
INFO: Loaded 1 PC tables (627269 PCs): 627269 [0xaaaae91f7dd0,0xaaaae9b8a220), 
INFO:     2089 files found in /ci_container_base/ci/scratch/qa-assets/fuzz_corpora/miniscript_smart
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 181882 bytes
INFO: seed corpus: files: 2089 min: 1b max: 181882b total: 445592b rss: 113Mb
fuzz: test/fuzz/miniscript.cpp:1187: void (anonymous namespace)::TestNode(const MsCtx, const NodeRef &, FuzzedDataProvider &): Assertion `res || serror == ScriptError::SCRIPT_ERR_OP_COUNT || serror == ScriptError::SCRIPT_ERR_STACK_SIZE' failed.
==7777== ERROR: libFuzzer: deadly signal
/usr/bin/llvm-symbolizer-19: error: 'linux-vdso.so.1': No such file or directory
    #0 0xaaaae5922988 in __sanitizer_print_stack_trace (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1da2988) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #1 0xaaaae5873880 in fuzzer::PrintStackTrace() (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cf3880) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #2 0xaaaae5859630 in fuzzer::Fuzzer::CrashCallback() (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cd9630) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #3 0xffffaed3d79c  (linux-vdso.so.1+0x79c) (BuildId: 611870d34ca7b0f7f70efb81ab546d1b3826218d)
    #4 0xffffae507624  (/lib/aarch64-linux-gnu/libc.so.6+0x87624) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #5 0xffffae4bcb38 in raise (/lib/aarch64-linux-gnu/libc.so.6+0x3cb38) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #6 0xffffae4a7dfc in abort (/lib/aarch64-linux-gnu/libc.so.6+0x27dfc) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #7 0xffffae4b5cb8  (/lib/aarch64-linux-gnu/libc.so.6+0x35cb8) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #8 0xffffae4b5d28 in __assert_fail (/lib/aarch64-linux-gnu/libc.so.6+0x35d28) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #9 0xaaaae5d4ce38 in (anonymous namespace)::TestNode(miniscript::MiniscriptContext, std::shared_ptr<miniscript::Node<CPubKey> const> const&, FuzzedDataProvider&) /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/./test/fuzz/miniscript.cpp:1187:9
    #10 0xaaaae5d55768 in miniscript_smart_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>) /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/./test/fuzz/miniscript.cpp:1279:5
    #11 0xaaaae626ba9c in std::function<void (std::span<unsigned char const, 18446744073709551615ul>)>::operator()(std::span<unsigned char const, 18446744073709551615ul>) const /usr/lib/gcc/aarch64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:591:9
    #12 0xaaaae626ba9c in test_one_input(std::span<unsigned char const, 18446744073709551615ul>) /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/util/./test/fuzz/fuzz.cpp:85:5
    #13 0xaaaae626b7e0 in LLVMFuzzerTestOneInput /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/util/./test/fuzz/fuzz.cpp:223:5
    #14 0xaaaae585abe8 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cdabe8) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #15 0xaaaae585a290 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cda290) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #16 0xaaaae585c130 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cdc130) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #17 0xaaaae585c698 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cdc698) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #18 0xaaaae5849cb4 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cc9cb4) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #19 0xaaaae58743b0 in main (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cf43b0) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #20 0xffffae4a84c0  (/lib/aarch64-linux-gnu/libc.so.6+0x284c0) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #21 0xffffae4a8594 in __libc_start_main (/lib/aarch64-linux-gnu/libc.so.6+0x28594) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #22 0xaaaae583f6ac in _start (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cbf6ac) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)

NOTE: libFuzzer has rudimentary signal handlers.
      Combine libFuzzer with AddressSanitizer or similar for better crash reports.
SUMMARY: libFuzzer: deadly signal
MS: 0 ; base unit: 0000000000000000000000000000000000000000
0x24,0x1,0x0,0x5,0x30,0x6b,0x26,0xf6,0xc0,0x8f,0x94,0xd9,
$\001\000\0050k&\366\300\217\224\331
artifact_prefix='./'; Test unit written to ./crash-c551bf4c0924abd717620b708b22adda9fb351ee
Base64: JAEABTBrJvbAj5TZ

INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3106261954
INFO: Loaded 1 modules   (627269 inline 8-bit counters): 627269 [0xaaaae915eb88, 0xaaaae91f7dcd), 
INFO: Loaded 1 PC tables (627269 PCs): 627269 [0xaaaae91f7dd0,0xaaaae9b8a220), 
INFO:     2089 files found in /ci_container_base/ci/scratch/qa-assets/fuzz_corpora/miniscript_smart
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 181882 bytes
INFO: seed corpus: files: 2089 min: 1b max: 181882b total: 445592b rss: 113Mb
fuzz: test/fuzz/miniscript.cpp:1187: void (anonymous namespace)::TestNode(const MsCtx, const NodeRef &, FuzzedDataProvider &): Assertion `res || serror == ScriptError::SCRIPT_ERR_OP_COUNT || serror == ScriptError::SCRIPT_ERR_STACK_SIZE' failed.
==7777== ERROR: libFuzzer: deadly signal
/usr/bin/llvm-symbolizer-19: error: 'linux-vdso.so.1': No such file or directory
    #0 0xaaaae5922988 in __sanitizer_print_stack_trace (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1da2988) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #1 0xaaaae5873880 in fuzzer::PrintStackTrace() (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cf3880) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #2 0xaaaae5859630 in fuzzer::Fuzzer::CrashCallback() (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cd9630) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #3 0xffffaed3d79c  (linux-vdso.so.1+0x79c) (BuildId: 611870d34ca7b0f7f70efb81ab546d1b3826218d)
    #4 0xffffae507624  (/lib/aarch64-linux-gnu/libc.so.6+0x87624) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #5 0xffffae4bcb38 in raise (/lib/aarch64-linux-gnu/libc.so.6+0x3cb38) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #6 0xffffae4a7dfc in abort (/lib/aarch64-linux-gnu/libc.so.6+0x27dfc) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #7 0xffffae4b5cb8  (/lib/aarch64-linux-gnu/libc.so.6+0x35cb8) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #8 0xffffae4b5d28 in __assert_fail (/lib/aarch64-linux-gnu/libc.so.6+0x35d28) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #9 0xaaaae5d4ce38 in (anonymous namespace)::TestNode(miniscript::MiniscriptContext, std::shared_ptr<miniscript::Node<CPubKey> const> const&, FuzzedDataProvider&) /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/./test/fuzz/miniscript.cpp:1187:9
    #10 0xaaaae5d55768 in miniscript_smart_fuzz_target(std::span<unsigned char const, 18446744073709551615ul>) /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/./test/fuzz/miniscript.cpp:1279:5
    #11 0xaaaae626ba9c in std::function<void (std::span<unsigned char const, 18446744073709551615ul>)>::operator()(std::span<unsigned char const, 18446744073709551615ul>) const /usr/lib/gcc/aarch64-linux-gnu/13/../../../../include/c++/13/bits/std_function.h:591:9
    #12 0xaaaae626ba9c in test_one_input(std::span<unsigned char const, 18446744073709551615ul>) /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/util/./test/fuzz/fuzz.cpp:85:5
    #13 0xaaaae626b7e0 in LLVMFuzzerTestOneInput /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/util/./test/fuzz/fuzz.cpp:223:5
    #14 0xaaaae585abe8 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cdabe8) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #15 0xaaaae585a290 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cda290) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #16 0xaaaae585c130 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cdc130) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #17 0xaaaae585c698 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cdc698) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #18 0xaaaae5849cb4 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cc9cb4) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #19 0xaaaae58743b0 in main (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cf43b0) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)
    #20 0xffffae4a84c0  (/lib/aarch64-linux-gnu/libc.so.6+0x284c0) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #21 0xffffae4a8594 in __libc_start_main (/lib/aarch64-linux-gnu/libc.so.6+0x28594) (BuildId: 32fa4d6f3a8d5f430bdb7af2eb779470cd5ec7c2)
    #22 0xaaaae583f6ac in _start (/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz+0x1cbf6ac) (BuildId: 2aeae21417e87b58c23f49c8227e347304d53d6f)

NOTE: libFuzzer has rudimentary signal handlers.
      Combine libFuzzer with AddressSanitizer or similar for better crash reports.
SUMMARY: libFuzzer: deadly signal
MS: 0 ; base unit: 0000000000000000000000000000000000000000
0x24,0x1,0x0,0x5,0x30,0x6b,0x26,0xf6,0xc0,0x8f,0x94,0xd9,
$\001\000\0050k&\366\300\217\224\331
artifact_prefix='./'; Test unit written to ./crash-c551bf4c0924abd717620b708b22adda9fb351ee
Base64: JAEABTBrJvbAj5TZ

⚠️ Failure generated from target with exit code 77: ['/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/src/test/fuzz/fuzz', '-runs=1', PosixPath('/ci_container_base/ci/scratch/qa-assets/fuzz_corpora/miniscript_smart')]
root@64ee64269b01:/ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/test/fuzz# 

----------------------------------
failed script on src/test/fuzz/miniscript.cpp
to reproduce: 
%docker exec -it ci_native_fuzz sh

to install lldb on Ubuntu:
# apt install lldb

# cd /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu/test/fuzz

# ./test_runner.py -j8 -l DEBUG /ci_container_base/ci/scratch/qa-assets/fuzz_corpora/ miniscript_smart --empty_min_time=60

to build in docker container:
# cd /ci_container_base/ci/scratch/build-aarch64-unknown-linux-gnu
# cmake --build . -j8 --target all install

to copy files:
% docker cp miniscript.cpp ci_native_fuzz:/tmp

