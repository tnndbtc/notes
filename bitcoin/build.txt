This is for Apple M1 chip, Sequoia 15.1.1 (arm64)

----------------------------------
----------------------------------
----------------------------------
llvm:
It's not that we can install any LLVM, but we need to install the right version of llvm that works for the version of /usr/bin/ld:

% ld -v
@(#)PROGRAM:ld PROJECT:ld-1115.7.3
BUILD 23:52:02 Dec  5 2024
configured to support archs: armv6 armv7 armv7s arm64 arm64e arm64_32 i386 x86_64 x86_64h armv6m armv7k armv7m armv7em
will use ld-classic for: armv6 armv7 armv7s i386 armv6m armv7k armv7m armv7em
LTO support using: LLVM version 16.0.0 (static support for 29, runtime is 29)
TAPI support using: Apple TAPI version 16.0.0 (tapi-1600.0.11.9)

So, we need to install llvm 16.0.0.

% brew install llvm@16

then add following 3 environment variables:
export PATH=/opt/homebrew/opt/llvm@16/bin:$PATH
export LDFLAGS="-L/opt/homebrew/opt/llvm@16/lib"
export CPPFLAGS="-I/opt/homebrew/opt/llvm@16/include"

----------------------------------
Build:
https://github.com/bitcoin/bitcoin has changed to use cmake to build recently, so, we need to cover the build process for both Makefile and cmake:

1) Makefile (old versions):
% ./autogen.sh
% ./configure --with-gui=no CXX=clang++
% make
or
% make -j 8 # if there are 8 CPUs

2) cmake (newer versions):
% cmake -B build -DENABLE_WALLET=ON -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm@16/bin/clang++ -DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm@16/bin/clang

# enable Debug build
% cmake -B build -DENABLE_WALLET=ON -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm@16/bin/clang++ -DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm@16/bin/clang -DCMAKE_BUILD_TYPE=Debug

#enable ZMQ
% brew install zeromq
% cmake -B build -DENABLE_WALLET=ON -DCMAKE_CXX_COMPILER=/opt/homebrew/opt/llvm@16/bin/clang++ -DCMAKE_C_COMPILER=/opt/homebrew/opt/llvm@16/bin/clang -DWITH_ZMQ:BOOL=ON

% cmake --build build
or 
% cmake --build build -j 8 # if there are 8 CPUs

% ctest --test-dir build

3) cmake to build fuzzer
% cmake --preset=libfuzzer \
  -DCMAKE_C_COMPILER="$(brew --prefix llvm)@16/bin/clang" \
  -DCMAKE_CXX_COMPILER="$(brew --prefix llvm)@16/bin/clang++" \
  -DAPPEND_LDFLAGS=-Wl,-no_warn_duplicate_libraries
% cmake --build build_fuzz
% FUZZ=process_message build_fuzz/src/test/fuzz/fuzz

4) Run all possible tests with
build/test/functional/test_runner.py --extended

5) In order to run backwards compatibility tests, first run:
test/get_previous_releases.py -b
----------------------------------
To add remote forked repo so you can cherry-pick changes from other peoples pull request:
% git remote add andremralves https://github.com/andremralves/bitcoin
% git fetch andremralves
----------------------------------
build/src/bitcoind -signet -bind=0.0.0.0:8333
bitcoind -signet -bind=0.0.0.0:8333
bitcoind -regtest -bind=0.0.0.0:8333

bitcoind -dnsseed=1 -listen=1

-testnet
-signet
-regtest
bitcoin-cli -regtest getinfo
bitcoin-cli -regtest getpeerinfo
bitcoin-cli -regtest getnetworkinfo
bitcoin-cli -regtest -getinfo
bitcoin-cli getconnectioncount
----------------------------------
to connect to functional test node:
./build/bin/bitcoin-cli -regtest -rpcport=16001  -rpcuser=__cookie__ -rpcpassword=<cookie value> estimatesmartfee 6
rpcport can be found in /tmp/test_runner_‚Çø_üèÉ_20250528_194810/feature_fee_estimation_0/node1/bitcoin.conf (rpcport=16001)
rpcuser and cookie value can be found at:
/tmp/test_runner_‚Çø_üèÉ_20250528_194810/feature_fee_estimation_0/node1/regtest/.cookie
or, on mainnet, it can be found at:
-datadir=/Users/user/tmp/bitcoin_data
as /Users/user/tmp/bitcoin_data/.cookie
build/bin/bitcoind -datadir=/Users/user/tmp/bitcoin_data -debug=all -blocksonly=1 -debuglogfile=/Users/user/tmp/bitcoin_data/debug.log -conf=/Users/user/tmp/bitcoin_data/bitcoin.conf
----------------------------------
bitcoind data folder:
~/Library/Application Support/Bitcoin
----------------------------------
